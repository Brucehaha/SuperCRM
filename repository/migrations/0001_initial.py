# Generated by Django 2.1.5 on 2019-06-28 06:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_type', models.SmallIntegerField(choices=[(0, 'Billing Address'), (1, 'Shipping Address')])),
                ('street_no', models.CharField(max_length=16)),
                ('street_name', models.CharField(max_length=64)),
                ('suburb', models.CharField(max_length=64)),
                ('postcode', models.SmallIntegerField()),
                ('state', models.SmallIntegerField(choices=[('0', 'VIC'), (1, 'NSW'), (2, 'QLD'), (3, 'SA'), (3, 'WA'), (4, 'TAS')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CartToProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(default=0)),
                ('discount', models.IntegerField(default=0)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Cart')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.TextField()),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='repository.Category')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerFollowUp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=64)),
                ('company', models.CharField(default=None, max_length=64)),
                ('email', models.CharField(max_length=64, unique=True)),
                ('phone', models.CharField(max_length=64, unique=True)),
                ('mobile', models.CharField(max_length=64, unique=True)),
                ('source', models.SmallIntegerField(choices=[(0, 'Referral'), (1, 'Web search'), (2, 'Google Ads'), (3, 'Bing Ads'), (4, 'Other')])),
                ('Reference', models.CharField(blank=True, max_length=20, null=True, verbose_name='Refered by')),
                ('consult_content', models.TextField()),
                ('status', models.SmallIntegerField(choices=[(0, 'Unregistered'), (1, 'Registered'), (2, 'Quited')])),
                ('timestamp', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=16)),
                ('level', models.SmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='DiscountInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_quantity', models.IntegerField()),
                ('max_quantiy', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('image', models.ImageField(upload_to='')),
                ('timestamp', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('url_type', models.SmallIntegerField(choices=[(0, 'absolute'), (1, 'dynamic')], default=0)),
                ('url_name', models.CharField(max_length=128)),
                ('icon', models.TextField()),
                ('order', models.PositiveSmallIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_location', models.PositiveSmallIntegerField(choices=[(0, 'Pickup in VIC Depot'), (1, 'Pickup in  NSW Depot'), (2, 'Delivery to Your Address')], default=0)),
                ('payment_method', models.PositiveSmallIntegerField(choices=[(0, 'Pay on pickup'), (1, 'Bank Transfer'), (2, 'Pay over the phone')], default=0)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Proccessing'), (1, 'Paid'), (2, 'Shipped'), (3, 'Picked up')], default=0)),
                ('ship_total', models.DecimalField(decimal_places=2, default='', max_digits=200)),
                ('total', models.DecimalField(decimal_places=2, default=5.99, max_digits=200)),
                ('GST', models.DecimalField(decimal_places=2, default=5.99, max_digits=200)),
                ('stub_total', models.DecimalField(decimal_places=2, default=5.99, max_digits=200)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='billing', to='repository.Address')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Cart')),
                ('shipping_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shipping', to='repository.Address')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
                ('color', models.CharField(max_length=16)),
                ('width', models.PositiveIntegerField(default=0)),
                ('thickness', models.PositiveIntegerField(default=0)),
                ('veneer', models.SmallIntegerField(default=0)),
                ('sku', models.CharField(blank=True, max_length=16, null=True, unique=True)),
                ('pack_size', models.FloatField()),
                ('length', models.PositiveSmallIntegerField(default=0)),
                ('stock_level', models.FloatField(default=0)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='repository.Category')),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('replyTo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Reply')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('menu', models.ManyToManyField(to='repository.Menu')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=32)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', models.IntegerField(choices=[(0, 'open'), (1, 'processing'), (2, 'closed')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('email', models.CharField(max_length=64, unique=True)),
                ('role', models.ManyToManyField(to='repository.Role')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='ticket',
            name='claimer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claimer', to='repository.UserProfile'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='processor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processor', to='repository.UserProfile'),
        ),
        migrations.AddField(
            model_name='reply',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Ticket'),
        ),
        migrations.AddField(
            model_name='reply',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.UserProfile'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='repository.UserProfile'),
        ),
        migrations.AlterUniqueTogether(
            name='menu',
            unique_together={('name', 'url_name')},
        ),
        migrations.AddField(
            model_name='discount',
            name='interval',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.DiscountInterval'),
        ),
        migrations.AddField(
            model_name='discount',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CustomerLevel'),
        ),
        migrations.AddField(
            model_name='customerinfo',
            name='consult_product',
            field=models.ManyToManyField(to='repository.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='customerinfo',
            name='consultant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consultant', to='repository.UserProfile'),
        ),
        migrations.AddField(
            model_name='customerinfo',
            name='level',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.CustomerLevel'),
        ),
        migrations.AddField(
            model_name='customerinfo',
            name='userprofile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userprofile', to='repository.UserProfile'),
        ),
        migrations.AddField(
            model_name='customerfollowup',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CustomerInfo'),
        ),
        migrations.AddField(
            model_name='customerfollowup',
            name='user',
            field=models.ForeignKey(on_delete='Sales', to='repository.UserProfile'),
        ),
        migrations.AddField(
            model_name='carttoproduct',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Product'),
        ),
        migrations.AddField(
            model_name='cart',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.UserProfile'),
        ),
        migrations.AddField(
            model_name='address',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.CustomerInfo'),
        ),
    ]
